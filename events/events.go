package events

// Code generated by avro/gen. DO NOT EDIT.

import (
	"github.com/hamba/avro/v2"
)

// Event is a generated struct.
type Event struct {
	ID      string `avro:"id"`
	Version int    `avro:"version"`
}

var schemaEvent = avro.MustParse(`{"name":"seraph.events.Event","type":"record","fields":[{"name":"id","type":"string"},{"name":"version","type":"int"}]}`)

// Schema returns the schema for Event.
func (o *Event) Schema() avro.Schema {
	return schemaEvent
}

// Unmarshal decodes b into the receiver.
func (o *Event) Unmarshal(b []byte) error {
	return avro.Unmarshal(o.Schema(), b, o)
}

// Marshal encodes the receiver.
func (o *Event) Marshal() ([]byte, error) {
	return avro.Marshal(o.Schema(), o)
}

// FileInfoEvent is a generated struct.
type FileInfoEvent struct {
	Event      Event  `avro:"event"`
	ProviderID string `avro:"providerId"`
	Readdir    string `avro:"readdir"`
	Last       bool   `avro:"last"`
	Path       string `avro:"path"`
	Size       int64  `avro:"size"`
	Mode       int64  `avro:"mode"`
	ModTime    int64  `avro:"modTime"`
	IsDir      bool   `avro:"isDir"`
}

var schemaFileInfoEvent = avro.MustParse(`{"name":"seraph.events.FileInfoEvent","type":"record","fields":[{"name":"event","type":"seraph.events.Event"},{"name":"providerId","type":"string"},{"name":"readdir","type":"string"},{"name":"last","type":"boolean"},{"name":"path","type":"string"},{"name":"size","type":"long"},{"name":"mode","type":"long"},{"name":"modTime","type":"long"},{"name":"isDir","type":"boolean"}]}`)

// Schema returns the schema for FileInfoEvent.
func (o *FileInfoEvent) Schema() avro.Schema {
	return schemaFileInfoEvent
}

// Unmarshal decodes b into the receiver.
func (o *FileInfoEvent) Unmarshal(b []byte) error {
	return avro.Unmarshal(o.Schema(), b, o)
}

// Marshal encodes the receiver.
func (o *FileInfoEvent) Marshal() ([]byte, error) {
	return avro.Marshal(o.Schema(), o)
}

// FileChangedEvent is a generated struct.
type FileChangedEvent struct {
	Event      Event  `avro:"event"`
	FileID     string `avro:"fileId"`
	ProviderID string `avro:"providerId"`
	Change     string `avro:"change"`
	Path       string `avro:"path"`
	Size       int64  `avro:"size"`
	Mode       int64  `avro:"mode"`
	ModTime    int64  `avro:"modTime"`
	IsDir      bool   `avro:"isDir"`
}

var schemaFileChangedEvent = avro.MustParse(`{"name":"seraph.events.FileChangedEvent","type":"record","fields":[{"name":"event","type":"seraph.events.Event"},{"name":"fileId","type":"string"},{"name":"providerId","type":"string"},{"name":"change","type":"string"},{"name":"path","type":"string"},{"name":"size","type":"long"},{"name":"mode","type":"long"},{"name":"modTime","type":"long"},{"name":"isDir","type":"boolean"}]}`)

// Schema returns the schema for FileChangedEvent.
func (o *FileChangedEvent) Schema() avro.Schema {
	return schemaFileChangedEvent
}

// Unmarshal decodes b into the receiver.
func (o *FileChangedEvent) Unmarshal(b []byte) error {
	return avro.Unmarshal(o.Schema(), b, o)
}

// Marshal encodes the receiver.
func (o *FileChangedEvent) Marshal() ([]byte, error) {
	return avro.Marshal(o.Schema(), o)
}
